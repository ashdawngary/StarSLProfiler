(define (sum-lon lon)
    (if (empty? lon) 0
        (+ (first lon) (sum-lon (rest lon)))))
(define samplist (cons 1 (cons 2 (cons 3 (cons 4 empty)))))
(define elist empty)
(define plusone (empty? empty))
(check-expect (sum-lon samplist) 10)
(check-expect (second samplist) 2)
(check-expect (third samplist) 3)
(check-expect (list 1 1 1 1 1) (make-list 5 1))
(check-expect (cons? empty) #f)
(define node-nei (list 'alice 'bob 'celine 'dave 'evan))
(define (member? sym losym)
    (if (cons? losym) (or (symbol=? (first losym) sym)
                          (member? sym (rest losym)))
                      #f))
(check-expect (member? 'alice node-nei) #t)
(check-expect (member? 'trevor node-nei) #f)